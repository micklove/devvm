- name: Base Linux configuration
  hosts: 127.0.0.1
  connection: local
  become: yes
  vars:
    username: "{{ lookup('env','USERNAME') }}"
    gh_version: "0.11.1"

  tasks:
    # cpu architecture
    - name: Get CPU architecture
      shell: dpkg --print-architecture
      register: dpkg_architecture_command
      changed_when: false

    - name: Store CPU architecture
      set_fact:
        dpkg_architecture: "{{ dpkg_architecture_command.stdout }}"

    # os version
    - name: Get OS version
      shell: lsb_release -cs
      register: lsb_release_command
      changed_when: false

    - name: Store OS version
      set_fact:
        lsb_release: "{{ lsb_release_command.stdout }}"

    # base packages
    - name: Install base packages
      apt:
        name:
          - apt-file
          - apt-transport-https
          - baobab
          - bat
          - build-essential
          - ca-certificates
          - cmake
          - curl
          - fd-find
          - fzf
          - git
          - git-gui
          - glances
          - gnupg2
          - httpie
          - jq
          - kitty
          - ncdu
          - neovim
          - netcat
          - net-tools
          - network-manager-openconnect
          - network-manager-openconnect-gnome
          - openconnect
          - python3-pip
          # TODO: Reenable when installation bug is fixed
          #   See https://bugs.launchpad.net/ubuntu/+source/rust-bat/+bug/1868517
          # - ripgrep
          - software-properties-common
          - tmux
          - tree
          - unzip
          - wget
          - zip
        state: latest
        force: yes

    # os config
    - name: Set timezone
      timezone:
        name: Australia/Sydney
    
    - name: Allow 'sudo' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^%sudo"
        line: "%sudo ALL=(ALL) NOPASSWD: ALL"
        validate: visudo -cf %s
    
    - name: Disable screen lock
      become: yes
      become_user: "{{ username }}"
      shell: "gsettings set org.gnome.desktop.screensaver lock-enabled false"

    - name: Disable screensaver
      become: yes
      become_user: "{{ username }}"
      shell: "gsettings set org.gnome.desktop.session idle-delay 0"

    - name: Move Window buttons to left
      become: yes
      become_user: "{{ username }}"
      shell: "gsettings set org.gnome.desktop.wm.preferences button-layout 'close,maximize,minimize:'"

    - name: Create a local bin directory if it does not exist
      become: yes
      become_user: "{{ username }}"
      file:
        path: ~/.local/bin
        state: directory
        mode: '0755'
      tags:
        init

    - name: Configure local profile
      become: yes
      become_user: "{{ username }}"
      copy:
        src: home/
        dest: ~/

    - name: Disable wayland
      lineinfile:
        path: /etc/gdm3/custom.conf
        regexp: "^#?WaylandEnable="
        line: "WaylandEnable=false"

    - name: Configure bash prompt
      become: yes
      become_user: "{{ username }}"
      blockinfile:
        path: ~/.bashrc
        block: |
          export AWS_PAGER=''
          export AWS_DEFAULT_REGION=ap-southeast-2
          set -o vi
          export HISTCONTROL=ignoreboth:erasedups      # no duplicate entries (AND If you want to run a command without saving it in history, prepend it with an extra space)

          if [ -f ~/dev/config/other-aliases ]; then
              . ~/dev/config/other-aliases
          fi

          format_git_branch() {
            git_branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')

            if [[ "${git_branch}" != "" ]]; then
              printf "\001\e[00m\002:\001\e[91m\002${git_branch}\001\e[00m\002"
            fi
          }
          export PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(format_git_branch)\$ '

    - name: gh cli
      shell: |
        curl "https://github.com/cli/cli/releases/download/v{{ gh_version}}/gh_{{ gh_version}}_linux_386.deb" -L -o gh_linux_386.deb
        sudo apt install ./gh_linux_386.deb
        rm -rf ./gh_linux_386.deb
      args:
        creates: /usr/local/bin/gh
        warn: no
      tags:
        git

    - name: install diff-so-fancy 
      become: yes
      become_user: "{{ username }}"
      git:
        repo: https://github.com/so-fancy/diff-so-fancy.git
        dest: ~/dev/diff-so-fancy
        accept_hostkey: true
      tags:
        git

    - name: Create adiff-so-fancy symbolic link 
      become: yes
      become_user: "{{ username }}"
      file:
        src: ~/dev/diff-so-fancy/diff-so-fancy
        dest: ~/.local/bin/diff-so-fancy
        state: link
      tags:
        git
        
    # aws cli
    - name: Install aws cli
      shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install
        rm -rf aws awscliv2.zip
      args:
        creates: /usr/local/bin/aws
        warn: no

    - name: install aws aliases 
      become: yes
      become_user: "{{ username }}"
      git:
        repo: https://github.com/micklove/env-setup.git
        dest: ~/dev/env-setup
        accept_hostkey: true
      tags:
        config   

    - name: Create aws symbolic link 
      become: yes
      become_user: "{{ username }}"
      file:
        src: ~/dev/env-setup/aws
        dest: ~/.aws
        state: link
      tags:
        config

    - name: Install AWS tooling
      become: yes
      become_user: "{{ username }}"
      pip:
        name:
          - aws-sam-cli
          - awscli-local
          - awslogs
          - cfn-flip
          - cfn-lint
          - sceptre
        state: latest
        extra_args: --user

    # chromium
    - name: Install chromium
      snap:
        name: chromium

    # docker
    - name: Install docker apt key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
    
    - name: Add docker apt repository
      apt_repository:
        repo: "deb [arch={{ dpkg_architecture }}] https://download.docker.com/linux/ubuntu {{ lsb_release }} edge"
        filename: docker
        state: present
      notify:
        - Update apt cache
    
    - meta: flush_handlers

      #    - name: Add user to the vbox shared folders group
      #user:
      #  name: "{{ username }}"
      #  groups: vboxsf
      #  append: yes

    - name: Install docker
      apt:
        name: "docker-ce:{{ dpkg_architecture }}"
        state: latest

    - name: Add user to the docker group
      user:
        name: "{{ username }}"
        groups: docker
        append: yes
    
    - name: Install docker python package
      become: yes
      become_user: "{{ username }}"
      pip:
        name: docker
        state: latest
        extra_args: --user

    # docker-compose
    - name: Install docker compose
      become: yes
      become_user: "{{ username }}"
      pip:
        name: docker-compose
        state: latest
        extra_args: --user

    # dotnet core
    - name: Install microsoft apt key
      apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
    
    - name: Add microsoft-ubuntu apt repository
      apt_repository:
        repo: "deb [arch={{ dpkg_architecture }}] https://packages.microsoft.com/repos/microsoft-ubuntu-{{ lsb_release }}-prod {{ lsb_release }} main"
        filename: dotnetdev
        state: present
      notify:
        - Update apt cache
    
    - meta: flush_handlers
    
    - name: Install dotnet-sdk-3.1
      apt:
        name: dotnet-sdk-3.1
        state: latest

    # jetbrains
    - name: Install Pycharm Professional
      snap:
        name: pycharm-professional
        classic: yes

    - name: Install IntelliJ Idea Ultimate
      snap:
        name: intellij-idea-ultimate
        classic: yes

    - name: Install DataGrip
      snap:
        name: datagrip
        classic: yes

    # nodejs
    - name: Install nvm
      become: yes
      become_user: "{{ username }}"
      shell: >
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
      args:
        creates: ~/.nvm/nvm.sh
        warn: no

    - name: Install node
      become: yes
      become_user: "{{ username }}"
      shell: >
        bash -c "source ~/.nvm/nvm.sh && nvm install --lts --latest-npm"
      args:
        creates: ~/.nvm/alias

    # postman
    - name: Install Postman
      snap:
        name: postman

    # python
    - name: Install pipenv
      become: yes
      become_user: "{{ username }}"
      pip:
        name: pipenv
        state: latest
        extra_args: --user

    # saml2aws
    - name: Install saml2aws
      become: yes
      become_user: "{{ username }}"
      shell: |
        CURRENT_VERSION=2.26.1
        wget https://github.com/Versent/saml2aws/releases/download/v${CURRENT_VERSION}/saml2aws_${CURRENT_VERSION}_linux_amd64.tar.gz
        tar -xzvf saml2aws_${CURRENT_VERSION}_linux_amd64.tar.gz -C ~/.local/bin
        chmod u+x ~/.local/bin/saml2aws
        rm -f saml2aws_${CURRENT_VERSION}_linux_amd64.tar.gz
      args:
        creates: ~/.local/bin/saml2aws
        warn: no

    # vscode
    - name: Install vscode
      snap:
        name: code
        classic: yes

    # yarn
    - name: Uninstall cmdtest
      apt:
        name: cmdtest
        state: absent

    - name: Install yarn apt key
      apt_key:
        url: https://dl.yarnpkg.com/debian/pubkey.gpg

    - name: Add yarn apt repository
      apt_repository:
        repo: "deb https://dl.yarnpkg.com/debian/ stable main"
        filename: yarn
        state: present
      notify:
        - Update apt cache

    - meta: flush_handlers

    - name: Install yarn
      apt:
        name: yarn
        state: latest
        install_recommends: no

    # cleanup
    - name: Remove dependencies that are no longer required
      apt:
        autoremove: yes

  # handlers
  handlers:
    - name: Update apt cache
      apt:
        update_cache: yes
